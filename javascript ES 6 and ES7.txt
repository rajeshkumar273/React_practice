javascript runs in the browser - on the loaded page.

you can manipulate the HTML structure (DOM) of the page.

React Js
--------

A client-side javaScript library
All about building modern reactive user interfaces for the web

Learn and focused component-based UI library. Certain features (e.g routing) are added via community packages.



function oldversion() {
	console.log("oldversion");
}
oldversion();

const newversion = () => {
	console.log("new version");
}

newversion();



function oldversion(number1) {

	return number1+50;
}

console.log(oldversion(50));

const newversion = (num1,num2) => {

	return num1+num2;

}

console.log(newversion(10,20))


function oldversion(number1) {

	return number1+50;
}

const newversion =(num1,num2) => num1+num2
console.log(newversion(10,10))
 


const newversion = num1 => num1+50;
console.log(newversion(150))



javascript classes
-----------------


class human{

	constructor() {

		this.age= 25;

	}

	printAge() {

		console.log(this.age);

	}

}

class person extends human {

	constructor() {

		this.name="abc";
	}

	printName() {
		console.log(this.name);

	}

}

const persons =new person();

persons.printName();
persons.printAge();


javascript super keyword()
--------------------------


class human{

	constructor() {

		this.age= 25;

	}

	printAge() {

		console.log(this.age);

	}

}

class person extends human {

	constructor() {

		this.name="abc";
	}

	printName() {
		console.log(this.name);

	}

}

const persons =new person();

persons.printName();
persons.printAge();



javascript class for ES7 (without constructor and super() keyword) 
------------------------------------------------------------------

class human {

	age=25;
	printAge = () => console.log(this.age)
}


class Person extends human {

	name="abc";
	age=50;
	
	printName = () => console.log(this.name);

}

const persons =new Person();

persons.printName()
persons.printAge()

spread operator in javascript
-----------------------------
set1=[1,2,3,4,5]
set2=[...set1,6,7,8,9,10]
console.log(set2);


spread operator in javascript (Object Form)
-------------------------------------------

set1 ={

	name:"abc",
	email:"abc@gmail.com"
	
}

set2 = {

	...set1,
	age:20
}

console.log(set2);


Destructuring in javascript ( unpacking, A set of values)
---------------------------

values =[10,20,30];
[a,b,c]=values;
console.log(a,b,c)

values =[10,20,30];
[a,,c]=values;

console.log(a,c)
----------------------------------


values ={

	email:"abc@gmail.com",
	age:25
}					//Naming convention

const {email,age} = values;

console.log(values.email)

Rest Operator
-------------

const array = (...arr) => console.log(arr);
const array = (a,b,...arr) => console.log(a,b);

array(10,20,30,40,50,60)

-------------------------------------------------------------------

Arrays [] in javascript
------------------------
array.push

use pop() remove from end

use shift() to remove from start

use splice() to remove arbitrary


let arr=[10,20,30,40]
arr.push(50);
console.log(arr)

arr.pop(); --> remove last item

arr.shift() --> remove first item

let index =2;
let index =indexOf(20);

arr.splice(index,1)

console.log(arr)


